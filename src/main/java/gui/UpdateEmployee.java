package gui;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import model.Employee;
import dao.EmployeeDAO;
import dao.PositionDAO;
import dao.SalaryDAO;
import dao.SalaryDAO.SalaryInfo;
import java.util.Date;
import java.util.Calendar;
import java.util.List;
import model.RegularEmployee;
import data.DBConnection; 
import java.sql.Connection; 

public class UpdateEmployee extends javax.swing.JFrame {

    private static final Logger LOGGER = Logger.getLogger(UpdateEmployee.class.getName());
    private EmployeeDAO employeeDAO;
    private SalaryDAO salaryDAO;
    private String currentEmployeeId;

    public UpdateEmployee() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.employeeDAO = new EmployeeDAO();
        this.salaryDAO = new SalaryDAO();
        empDOB.setDateFormatString("yyyy-MM-dd");
        populatePositionDropdown();
        populateSupervisorDropdown();
    }

    public void setEmployeeData(Employee employeeData) {
        if (employeeData != null) {
            currentEmployeeId = employeeData.getEmployeeNo();
            empLN.setText(employeeData.getEmployeeLN());
            empFN.setText(employeeData.getEmployeeFN());

            empDOB.setDate(employeeData.getEmployeeDOB());
            empAdd.setText(employeeData.getEmployeeAddress());
            empPN.setText(employeeData.getEmployeePhoneNumber());
            empSSSN.setText(employeeData.getEmployeeSSS());
            empPHN.setText(employeeData.getEmployeePhilHealth());
            empTIN.setText(employeeData.getEmployeeTIN());
            empPIN.setText(employeeData.getEmployeePagIbig());
            empStat.setSelectedItem(employeeData.getEmployeeStatus());
            empPos.setSelectedItem(employeeData.getEmployeePosition());
            empSup.setSelectedItem(employeeData.getEmployeeSupervisor());

            // Retrieve and display latest salary information
            try {
                SalaryInfo latestSalary = salaryDAO.getLatestSalaryByEmployeeId(currentEmployeeId);
                if (latestSalary != null) {
                    basicSalary.setText(String.valueOf(latestSalary.basicSalary));
                } else {
                    basicSalary.setText("0.00");
                    JOptionPane.showMessageDialog(this, "No active salary record found for this employee. Please enter new salary details.", "Info", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (SQLException ex) {
                LOGGER.log(Level.SEVERE, "Error retrieving salary for employee " + currentEmployeeId, ex);
                JOptionPane.showMessageDialog(this, "Database error retrieving salary: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                basicSalary.setText("0.00");
            }

        } else {
            LOGGER.log(Level.WARNING, "Null employeeData object provided to setEmployeeData.");
            JOptionPane.showMessageDialog(this, "Error: No employee data to display.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        empLN = new javax.swing.JTextField();
        empFN = new javax.swing.JTextField();
        empAdd = new javax.swing.JTextField();
        empPN = new javax.swing.JTextField();
        empSSSN = new javax.swing.JTextField();
        empPHN = new javax.swing.JTextField();
        empTIN = new javax.swing.JTextField();
        empPIN = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        updEmpData = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        basicSalary = new javax.swing.JTextField();
        empDOB = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        empPos = new javax.swing.JComboBox<>();
        empSup = new javax.swing.JComboBox<>();
        empStat = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Updating Employee Data");
        setMinimumSize(new java.awt.Dimension(500, 650));

        empAdd.setText("House/Unit #, Brgy, City, Province, Region, Postal Code");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Last Name :");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("First Name :");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Date of Birth :");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Address :");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("Phone Number :");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("SSS Number :");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setText("PhilHealth Number :");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setText("TIN :");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel11.setText("HDMFN :");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel12.setText("Employment Status :");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel13.setText("Position :");

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel14.setText("Supervisor :");

        updEmpData.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        updEmpData.setText("Update Employee Data");
        updEmpData.setMaximumSize(new java.awt.Dimension(140, 23));
        updEmpData.setMinimumSize(new java.awt.Dimension(140, 23));
        updEmpData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updEmpDataActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel15.setText("Basic Salary :");

        empDOB.setDateFormatString("yyyy-MM-dd");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Personal Information");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Government ID Numbers");

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel16.setText("Employment Information");

        empPos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        empSup.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        empStat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Regular", "Probationary" }));
        empStat.setSelectedIndex(1);
        empStat.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(empLN, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(jLabel4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(empFN, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(38, 38, 38)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(empAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(empPN, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(12, 12, 12)
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(empDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(25, 25, 25)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel9)
                                            .addGap(18, 18, 18)
                                            .addComponent(empPHN, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel8)
                                            .addGap(18, 18, 18)
                                            .addComponent(empSSSN, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(empSup, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(23, 23, 23)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel11)
                                    .addGap(18, 18, 18)
                                    .addComponent(empPIN, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel10)
                                    .addGap(18, 18, 18)
                                    .addComponent(empTIN, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel13)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(basicSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(empPos, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(12, 12, 12))))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel16)
                                    .addGap(112, 112, 112))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(118, 118, 118))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(updEmpData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(empStat, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15)))
                .addGap(158, 158, 158))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(empLN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(empFN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(empPN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(empDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(empAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(33, 33, 33)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(empSSSN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(empTIN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(empPIN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(empPHN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))))
                .addGap(36, 36, 36)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel13)
                    .addComponent(empPos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(empSup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel15)
                    .addComponent(basicSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(empStat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addComponent(updEmpData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void updEmpDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updEmpDataActionPerformed

        Connection conn = null; 
        try {
            conn = DBConnection.getTransactionalConnection(); //

            String empLNValue = empLN.getText();
            String empFNValue = empFN.getText();
            Date empDOBValue = empDOB.getDate();
            String empAddValue = empAdd.getText();
            String empPNValue = empPN.getText();
            String empSSSNValue = empSSSN.getText();
            String empPHNValue = empPHN.getText();
            String empTINValue = empTIN.getText();
            String empPINValue = empPIN.getText();
            String empStatValue = (String) empStat.getSelectedItem();
            String empPosValue = (String) empPos.getSelectedItem();
            String empSupValue = (String) empSup.getSelectedItem();
            String basicSalaryText = basicSalary.getText().trim();

            // Input validation
            if (empLNValue.isEmpty() || empFNValue.isEmpty() || empDOBValue == null || empAddValue.isEmpty()
                    || empPNValue.isEmpty() || empSSSNValue.isEmpty() || empPHNValue.isEmpty() || empTINValue.isEmpty() || empPINValue.isEmpty()
                    || empStatValue == null || empPosValue == null || empSupValue == null
                    || basicSalaryText.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in all fields.", "Update Employee Data", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Validation for numeric fields
            if (!empPNValue.matches("\\d+(?:-?\\d+)*") || !empSSSNValue.matches("\\d+(?:-?\\d+)*") || !empPHNValue.matches("\\d+(?:-?\\d+)*") || !empTINValue.matches("\\d+(?:-?\\d+)*") || !empPINValue.matches("\\d+(?:-?\\d+)*")) {
                JOptionPane.showMessageDialog(this, "Please enter numeric values for Phone #, SSS #, PhilHealth #, TIN, and HDMFN.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
                return;
            }

            Date today = new Date();
            if (empDOBValue.after(today)) {
                JOptionPane.showMessageDialog(this, "Date of birth cannot be in the future.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
                return;
            }

            Double basicSalary = 0.0;
            try {
                basicSalary = Double.valueOf(basicSalaryText);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Invalid numeric input for Basic Salary.", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Create an Employee object with the updated data
            Employee updatedEmployee = new RegularEmployee(
                    currentEmployeeId, 
                    empFNValue, empLNValue, empAddValue, normalizeDateToMidnight(empDOBValue), empPNValue,
                    empSSSNValue, empPHNValue, empTINValue, empPINValue, empStatValue,
                    empPosValue, empSupValue, basicSalary 
            );

            // Update employee data in 'employee' table
            boolean employeeUpdated = employeeDAO.updateEmployee(conn, updatedEmployee);
            if (!employeeUpdated) {
                JOptionPane.showMessageDialog(this, "Failed to update employee details. Please check logs.", "Update Employee Data", JOptionPane.ERROR_MESSAGE);
                conn.rollback(); 
                return;
            }

            // Handle Salary Update (soft delete old, insert new if basic salary changed)
            // Get latest salary info 
            SalaryInfo currentSalaryInfo = salaryDAO.getLatestSalaryByEmployeeId(currentEmployeeId);

            // Check if basic salary has changed
            boolean salaryChanged = (currentSalaryInfo == null) 
                    || (Math.abs(currentSalaryInfo.basicSalary - basicSalary) > 0.001); 

            if (salaryChanged) {
                if (currentSalaryInfo != null) {
                    boolean softDeleted = salaryDAO.softDeleteCurrentSalary(conn, currentEmployeeId); 
                    if (!softDeleted) {
                        LOGGER.log(Level.WARNING, "Failed to soft-delete old salary record for employee: " + currentEmployeeId);
                        conn.rollback();
                        JOptionPane.showMessageDialog(this, "Failed to deactivate old salary record. Update aborted.", "Update Employee Data", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                // Insert the new salary record
                boolean salaryAdded = salaryDAO.addSalary(conn, currentEmployeeId, basicSalary); 
                if (!salaryAdded) {
                    JOptionPane.showMessageDialog(this, "Failed to add new salary record. Please check logs.", "Update Employee Data", JOptionPane.ERROR_MESSAGE);
                    conn.rollback(); 
                    return;
                }
            }

            
            conn.commit(); //
            JOptionPane.showMessageDialog(this, "Employee data and salary updated successfully.", "Update Employee Data", JOptionPane.INFORMATION_MESSAGE);
            this.dispose(); 

        } catch (SQLException ex) {
            
            if (conn != null) {
                try {
                    conn.rollback(); 
                    LOGGER.log(Level.INFO, "Transaction rolled back due to SQL error.");
                } catch (SQLException rollbackEx) {
                    LOGGER.log(Level.SEVERE, "Error rolling back transaction: " + rollbackEx.getMessage(), rollbackEx);
                }
            }
            LOGGER.log(Level.SEVERE, "Database error during employee update: " + ex.getMessage(), ex);
            JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Update Employee Data", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException ex) {
            LOGGER.log(Level.SEVERE, "Number format error in salary calculation: " + ex.getMessage(), ex);
            JOptionPane.showMessageDialog(this, "Invalid numeric input for Basic Salary.", "Input Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            
            if (conn != null) {
                try {
                    conn.close(); 
                    LOGGER.log(Level.INFO, "Database connection closed.");
                } catch (SQLException closeEx) {
                    LOGGER.log(Level.SEVERE, "Error closing database connection: " + closeEx.getMessage(), closeEx);
                }
            }
        }
    }//GEN-LAST:event_updEmpDataActionPerformed

    private Date normalizeDateToMidnight(Date date) {
        if (date == null) {
            return null;
        }
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(date);
        calendar.set(Calendar.HOUR_OF_DAY, 0);
        calendar.set(Calendar.MINUTE, 0);
        calendar.set(Calendar.SECOND, 0);
        calendar.set(Calendar.MILLISECOND, 0);
        return calendar.getTime();
    }

    private void populatePositionDropdown() {
        try {
            PositionDAO positionDAO = new PositionDAO(); 
            List<String> positions = positionDAO.getAllPositionNames();
            empPos.removeAllItems();
            for (String pos : positions) {
                empPos.addItem(pos);
            }
        } catch (SQLException ex) {
            LOGGER.log(Level.SEVERE, "Failed to load positions", ex);
        }
    }

    private void populateSupervisorDropdown() {
        try {
            EmployeeDAO employeeDAO = new EmployeeDAO(); 
            List<Employee> allEmployees = employeeDAO.getAllEmployees();
            empSup.removeAllItems();
            for (Employee emp : allEmployees) {
                empSup.addItem(emp.getEmployeeNo() + " - " + emp.getEmployeeFN() + " " + emp.getEmployeeLN());
            }
        } catch (SQLException ex) {
            LOGGER.log(Level.SEVERE, "Failed to load supervisors", ex);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField basicSalary;
    private javax.swing.JTextField empAdd;
    private com.toedter.calendar.JDateChooser empDOB;
    private javax.swing.JTextField empFN;
    private javax.swing.JTextField empLN;
    private javax.swing.JTextField empPHN;
    private javax.swing.JTextField empPIN;
    private javax.swing.JTextField empPN;
    private javax.swing.JComboBox<String> empPos;
    private javax.swing.JTextField empSSSN;
    private javax.swing.JComboBox<String> empStat;
    private javax.swing.JComboBox<String> empSup;
    private javax.swing.JTextField empTIN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton updEmpData;
    // End of variables declaration//GEN-END:variables
}
