package gui;

import dao.AllowanceDAO;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.List;
import javax.swing.JOptionPane;
import model.Employee;
import model.Admin;
import model.Manager;
import model.RegularEmployee;
import dao.AttendanceDAO;
import dao.EmployeeDAO;
import dao.PayslipDAO;
import dao.SalaryDAO;
import dao.AllowanceDAO;
import model.Payslip;
import dao.AttendanceDAO.AttendanceRecord;
import dao.PayrollDAO;
import data.DBConnection;
import java.sql.Connection;
import java.time.LocalDate;
import java.time.Month;
import java.util.HashMap;
import java.util.Map;
import model.Payroll;
import utilities.ReportGenerator;
import utilities.UtilMethods;

public class ViewSalary extends javax.swing.JFrame {

    private static final Logger LOGGER = Logger.getLogger(ViewSalary.class.getName());

    private String empNo;
    private HomePage homePage;
    private Employee currentUser;
    private EmployeeDAO employeeDAO;
    private AttendanceDAO attendanceDAO;
    private PayslipDAO payslipDAO;
    private SalaryDAO salaryDAO;
    private AllowanceDAO allowanceDAO;

    public ViewSalary() {
        this(null, null);
    }

    public ViewSalary(HomePage homePage, String empNo) {
        this.homePage = homePage;
        this.currentUser = (homePage != null) ? homePage.getCurrentUser() : null;
        this.empNo = (currentUser != null) ? currentUser.getEmployeeNo() : null;

        try {
            this.employeeDAO = new EmployeeDAO();
            LOGGER.info("EmployeeDAO initialized successfully in ViewSalary.");
            this.attendanceDAO = new AttendanceDAO();
            LOGGER.info("AttendanceDAO initialized successfully in ViewSalary.");
            this.payslipDAO = new PayslipDAO();
            LOGGER.info("PayslipDAO initialized successfully in ViewSalary.");
            this.salaryDAO = new SalaryDAO(); // Initialize SalaryDAO
            LOGGER.info("SalaryDAO initialized successfully in ViewSalary.");
            this.allowanceDAO = new AllowanceDAO(); // Initialize AllowanceDAO
            LOGGER.info("AllowanceDAO initialized successfully in ViewSalary.");
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "Fatal Error: Failed to initialize one or more DAOs in ViewSalary constructor.", e);
            JOptionPane.showMessageDialog(this,
                    "Application startup error: Could not connect to database or initialize components.\n"
                    + "Please check database connection and logs for details.\n" + e.getMessage(),
                    "Initialization Error", JOptionPane.ERROR_MESSAGE);
        }

        initComponents();
        showDate();
        this.setLocationRelativeTo(null);
        
        if (currentUser instanceof Manager){
            jButton2.setVisible(false);
            payrollRunButton.setVisible(false);
            jLabel1.setVisible(false);
        }
    }

    public void setCurrentUser(Employee currentUser) {
        this.currentUser = currentUser;
    }

    private void showDate() {
        SimpleDateFormat s = new SimpleDateFormat("yyyy-MM-dd");
        Date d = new Date();
        date.setText(s.format(d));
    }

    public void viewOwnSalary() {
        viewCompensation.setVisible(true);
        employeeNo.setText(empNo);
        employeeNo.setEditable(false);
        payrollRunButton.setVisible(false);
        jLabel1.setVisible(false);
        jButton2.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        testDateEvaluator1 = new com.toedter.calendar.demo.TestDateEvaluator();
        testDateEvaluator2 = new com.toedter.calendar.demo.TestDateEvaluator();
        hw1 = new javax.swing.JComboBox<>();
        label5 = new java.awt.Label();
        jPanel1 = new javax.swing.JPanel();
        label4 = new java.awt.Label();
        date = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        label3 = new java.awt.Label();
        employeeNo = new javax.swing.JTextField();
        viewButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        viewCompensation = new javax.swing.JButton();
        hw = new javax.swing.JComboBox<>();
        viewButton1 = new javax.swing.JButton();
        year = new java.awt.Label();
        jYearChooser1 = new com.toedter.calendar.JYearChooser();
        payrollRunButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        showData = new javax.swing.JTextArea();
        genPayslip = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        govContriReport = new javax.swing.JButton();

        hw1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January", "February", "March", "April", "June", "July", "August", "September", "October", "November", "December" }));

        label5.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        label5.setText("Month :");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("View Salary");
        setBackground(new java.awt.Color(204, 204, 204));
        setMinimumSize(new java.awt.Dimension(700, 540));

        jPanel1.setBackground(new java.awt.Color(0, 102, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(150, 100));

        label4.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        label4.setText("View Salary");

        date.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        date.setText("jLabel1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 610, Short.MAX_VALUE)
                .addComponent(date)
                .addGap(20, 20, 20))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(70, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(date, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        label1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        label1.setText("Employee No.:");

        label2.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        label2.setText("Month :");

        label3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label3.setText("Enter Employee Data To View Salary");

        viewButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        viewButton.setText("View Salary");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        backButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        backButton.setText("< Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        viewCompensation.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        viewCompensation.setText("View Compensation Details");
        viewCompensation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCompensationActionPerformed(evt);
            }
        });

        hw.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January", "February", "March", "April", "June", "July", "August", "September", "October", "November", "December" }));

        viewButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        viewButton1.setText("View Attendance");
        viewButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButton1ActionPerformed(evt);
            }
        });

        year.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        year.setText("Year :");

        payrollRunButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        payrollRunButton.setText("Run Payroll");
        payrollRunButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payrollRunButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Select the Month and Year");

        showData.setEditable(false);
        showData.setColumns(20);
        showData.setRows(5);
        showData.setWrapStyleWord(true);
        showData.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane2.setViewportView(showData);

        genPayslip.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        genPayslip.setText("Generate Payslip");
        genPayslip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genPayslipActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton2.setText("Payroll Summary Report");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        govContriReport.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        govContriReport.setText("YTD Gov Contribution Report");
        govContriReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                govContriReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1)
                                    .addComponent(viewCompensation, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(viewButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(viewButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(payrollRunButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(backButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(employeeNo)
                                    .addComponent(hw, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jYearChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(56, 56, 56))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(genPayslip)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(govContriReport)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(employeeNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jYearChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewButton)
                        .addGap(12, 12, 12)
                        .addComponent(viewButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(viewCompensation)
                        .addGap(13, 13, 13)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(payrollRunButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(genPayslip)
                    .addComponent(govContriReport))
                .addContainerGap())
        );

        label2.getAccessibleContext().setAccessibleName("Month (Ex. July):");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 760, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        try {
            String enteredEmpNo = employeeNo.getText().trim();
            String month = hw.getSelectedItem().toString().trim();
            int selectedYear = jYearChooser1.getYear();

            if (enteredEmpNo.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter an employee number.",
                        "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // --- Access Control Check ---
            // Apply Manager-specific restrictions for viewing payslips, attendance, compensation.
            // Managers can view:
            // - their own payslip
            // - RegularEmployee payslips only
            // Managers CANNOT view:
            // - Admins
            // - Other Managers
            // Fetch the target employee's actual object to check its type (Admin/Manager/Regular)
            Employee employeeToCheck = employeeDAO.getEmployeeByEmployeeNo(enteredEmpNo);
            if (employeeToCheck == null) {
                JOptionPane.showMessageDialog(this, "Employee not found!", "Search Result", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (!UtilMethods.canManagerViewEmployee(currentUser, employeeToCheck)) {
                JOptionPane.showMessageDialog(this,
                        "Access Denied! You cannot view payslips for Admins or other Managers.",
                        "Restricted Access", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // --- Use PayslipDAO to get the complete payslip ---
            Payslip payslip = payslipDAO.getPayslipByEmployeeAndMonth(enteredEmpNo, month, selectedYear);

            StringBuilder salaryInfoText = new StringBuilder();
            DecimalFormat df = new DecimalFormat("#,##0.00");

            if (payslip != null) {
                salaryInfoText.append("Payslip No.: ").append(payslip.getPayslipNo()).append("\n");
                salaryInfoText.append("Employee ID: ").append(payslip.getEmployeeId()).append("\n");
                salaryInfoText.append("Employee Name: ").append(payslip.getEmployeeName()).append("\n");
                salaryInfoText.append("Period: ").append(payslip.getPeriodStartDate()).append(" to ").append(payslip.getPeriodEndDate()).append("\n");
                salaryInfoText.append("Position: ").append(payslip.getEmployeePosition()).append("\n");
                salaryInfoText.append("Monthly Rate: ").append(df.format(payslip.getMonthlyRate())).append("\n");
                salaryInfoText.append("Daily Rate: ").append(df.format(payslip.getDailyRate())).append("\n");
                salaryInfoText.append("Days Worked: ").append(payslip.getDaysWorked()).append("\n");
                salaryInfoText.append("Overtime: ").append(df.format(payslip.getOvertime())).append("\n");
                salaryInfoText.append("Gross Income: ").append(df.format(payslip.getGrossIncome())).append("\n");

                salaryInfoText.append("\n------------------ Benefits ------------------").append("\n");
                salaryInfoText.append("Rice Subsidy: ").append(df.format(payslip.getRiceSubsidy())).append("\n");
                salaryInfoText.append("Phone Allowance: ").append(df.format(payslip.getPhoneAllowance())).append("\n");
                salaryInfoText.append("Clothing Allowance: ").append(df.format(payslip.getClothingAllowance())).append("\n");
                salaryInfoText.append("Total Benefits: ").append(df.format(payslip.getTotalBenefits())).append("\n");

                salaryInfoText.append("\n------------------ Deductions ------------------").append("\n");
                salaryInfoText.append("Social Security System: ").append(df.format(payslip.getSocialSecuritySystem())).append("\n");
                salaryInfoText.append("Philhealth: ").append(df.format(payslip.getPhilhealth())).append("\n");
                salaryInfoText.append("Pag-Ibig: ").append(df.format(payslip.getPagIbig())).append("\n");
                salaryInfoText.append("Withholding Tax: ").append(df.format(payslip.getWithholdingTax())).append("\n");
                salaryInfoText.append("Total Deductions: ").append(df.format(payslip.getTotalDeductions())).append("\n");

                salaryInfoText.append("\n------------------ Take Home Pay ------------------").append("\n");
                salaryInfoText.append("Take Home Pay: ").append(df.format(payslip.getTakeHomePay())).append("\n");

            } else {
                salaryInfoText.append("\n\t*** No Payslip Record Found For This Month And Employee! ***").append("\n");
            }

            showData.setText(salaryInfoText.toString());

        } catch (SQLException ex) {
            LOGGER.log(Level.SEVERE, "Database error viewing payslip details: " + ex.getMessage(), ex);
            JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_viewButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        homePage.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void viewCompensationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCompensationActionPerformed
        try {
            String enteredEmpNo = employeeNo.getText().trim();
            String month = hw.getSelectedItem().toString().trim();
            int selectedYear = jYearChooser1.getYear();

            if (enteredEmpNo.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter an employee number.",
                        "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // --- Access Control Check ---
            Employee employeeToCheck = employeeDAO.getEmployeeByEmployeeNo(enteredEmpNo);
            if (employeeToCheck == null) {
                JOptionPane.showMessageDialog(this, "Employee not found!", "Search Result", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (!UtilMethods.canManagerViewEmployee(currentUser, employeeToCheck)) {
                JOptionPane.showMessageDialog(this,
                        "Access Denied! You cannot view compensation details for Admins or other Managers.",
                        "Restricted Access", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // --- Fetching compensation details ---
            SimpleDateFormat currentMonthFormat = new SimpleDateFormat("MMMM");
            SimpleDateFormat currentYearFormat = new SimpleDateFormat("yyyy");
            String currentMonthName = currentMonthFormat.format(new Date());
            int currentYear = Integer.parseInt(currentYearFormat.format(new Date()));

            Payslip payslip = payslipDAO.getPayslipByEmployeeAndMonth(enteredEmpNo, month, selectedYear);

            if (payslip == null) {
                JOptionPane.showMessageDialog(this, "No payslip found for current month. Displaying available compensation details from employee/position data.", "Info", JOptionPane.INFORMATION_MESSAGE);

                double positionBasicRate = 0.0;
                String employeePosition = employeeToCheck.getEmployeePosition();
                if (employeePosition != null && !employeePosition.isEmpty()) {
                    try (java.sql.Connection conn = DBConnection.getConnection(); java.sql.PreparedStatement pstmt = conn.prepareStatement("SELECT BasicRate FROM position WHERE PositionName = ?")) {
                        pstmt.setString(1, employeePosition);
                        try (java.sql.ResultSet rs = pstmt.executeQuery()) {
                            if (rs.next()) {
                                positionBasicRate = rs.getDouble("BasicRate");
                            }
                        }
                    }
                }
                employeeToCheck.setBasicSalary(positionBasicRate);

            }

            StringBuilder infoText = new StringBuilder();
            DecimalFormat df = new DecimalFormat("#,##0.00");

            infoText.append("Employee No.: ").append(employeeToCheck.getEmployeeNo()).append("\n\n");
            infoText.append("Employee Name: ").append(employeeToCheck.getEmployeeFN()).append(" ").append(employeeToCheck.getEmployeeLN()).append("\n\n");

            if (payslip != null) {
                infoText.append("Basic Salary (Monthly): ").append(df.format(payslip.getMonthlyRate())).append("\n\n");
                infoText.append("Rice Subsidy: ").append(df.format(payslip.getRiceSubsidy())).append("\n\n");
                infoText.append("Phone Allowance: ").append(df.format(payslip.getPhoneAllowance())).append("\n\n");
                infoText.append("Clothing Allowance: ").append(df.format(payslip.getClothingAllowance())).append("\n\n");
                infoText.append("Hourly Rate: ").append(df.format(payslip.getMonthlyRate() / 168.0)).append("\n\n"); // Derived
            } else {
                infoText.append("Basic Salary (Monthly): ").append(df.format(employeeToCheck.getBasicSalary())).append("\n\n");
            }

            showData.setText(infoText.toString());

        } catch (SQLException ex) {
            LOGGER.log(Level.SEVERE, "Database error viewing compensation details: " + ex.getMessage(), ex);
            JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_viewCompensationActionPerformed

    private void viewButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButton1ActionPerformed
        try {
            String enteredEmpNo = employeeNo.getText().trim();
            String month = hw.getSelectedItem().toString().trim();
            int selectedYear = jYearChooser1.getYear();

            if (enteredEmpNo.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter an employee number.",
                        "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // --- Access Control Check ---
            Employee employeeToCheck = employeeDAO.getEmployeeByEmployeeNo(enteredEmpNo);
            if (employeeToCheck == null) {
                JOptionPane.showMessageDialog(this, "Employee not found!", "Search Result", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (!UtilMethods.canManagerViewEmployee(currentUser, employeeToCheck)) {
                JOptionPane.showMessageDialog(this,
                        "Access Denied! You cannot view attendance for Admins or other Managers.",
                        "Restricted Access", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Fetch attendance records from the database
            List<AttendanceRecord> records = attendanceDAO.getAttendanceRecordsByEmployeeAndMonth(enteredEmpNo, month, selectedYear);

            StringBuilder attendanceInfoText = new StringBuilder();
            attendanceInfoText.append("Attendance Records for Employee: ").append(employeeToCheck.getEmployeeFN()).append(" ").append(employeeToCheck.getEmployeeLN()).append("\n");
            attendanceInfoText.append("Employee No.: ").append(enteredEmpNo).append("\n");
            attendanceInfoText.append("Month: ").append(month).append(" ").append(selectedYear).append("\n\n");

            if (records.isEmpty()) {
                attendanceInfoText.append("\t*** No Attendance Records For This Month! ***\n");
            } else {
                attendanceInfoText.append("Date\tTime In\tTime Out\tHours Worked\n");
                attendanceInfoText.append("------------------------------------------------------------------\n");
                for (AttendanceRecord record : records) {
                    attendanceInfoText.append(record.getRecordDate()).append("\t")
                            .append(record.getLogInTime()).append("\t")
                            .append(record.getLogOutTime()).append("\t")
                            .append(String.format("%.2f", record.getHoursWorked())).append("\n");
                }
            }
            showData.setText(attendanceInfoText.toString());

        } catch (SQLException ex) {
            LOGGER.log(Level.SEVERE, "Database error viewing attendance details: " + ex.getMessage(), ex);
            JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_viewButton1ActionPerformed

    private void payrollRunButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payrollRunButtonActionPerformed
        String selectedMonthName = hw.getSelectedItem().toString().toUpperCase();
        int selectedYear = jYearChooser1.getYear();

        int selectedMonthNumber;
        try {
            selectedMonthNumber = Month.valueOf(selectedMonthName).getValue();
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, "Invalid month selected.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        LocalDate payrollStartDate = LocalDate.of(selectedYear, selectedMonthNumber, 1);
        LocalDate payrollEndDate = payrollStartDate.withDayOfMonth(payrollStartDate.lengthOfMonth());
        String payrollPeriodName = String.format("%s 1-%d, %d",
                payrollStartDate.getMonth().toString(), payrollEndDate.getDayOfMonth(), selectedYear);

        try {
            PayrollDAO payrollDAO = new PayrollDAO();

            payrollDAO.calculatePayroll(payrollPeriodName, payrollStartDate, payrollEndDate);
            JOptionPane.showMessageDialog(this, "Payroll calculation completed.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Payroll error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_payrollRunButtonActionPerformed

    private void genPayslipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genPayslipActionPerformed
        try (Connection conn = DBConnection.getConnection()) {

            String employeeId = employeeNo.getText().trim();
            int month = UtilMethods.getMonthIndex(hw.getSelectedItem().toString());   // or from a dropdown
            int year = jYearChooser1.getYear();

            if (employeeId.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter an employee number.",
                        "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // --- Access Control Check ---
            Employee employeeToCheck = employeeDAO.getEmployeeByEmployeeNo(employeeId);
            if (employeeToCheck == null) {
                JOptionPane.showMessageDialog(this, "Employee not found!", "Search Result", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (!UtilMethods.canManagerViewEmployee(currentUser, employeeToCheck)) {
                JOptionPane.showMessageDialog(this,
                        "Access Denied! You cannot generate payslip for Admins or other Managers.",
                        "Restricted Access", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Put into parameters map
            Map<String, Object> parameters = new HashMap<>();
            parameters.put("EmployeeID", Integer.valueOf(employeeId));
            parameters.put("Month", month);
            parameters.put("Year", year);

            // Generate report
            ReportGenerator generator = new ReportGenerator();
            generator.generateReport("PayslipGenerated.jrxml", parameters, conn);

        } catch (Exception ex) {
            Logger.getLogger(ViewSalary.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_genPayslipActionPerformed
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try (Connection conn = DBConnection.getConnection()) {

            int month = UtilMethods.getMonthIndex(hw.getSelectedItem().toString()); 
            int year = jYearChooser1.getYear();

            // --- Access Control Check ---
            Employee employeeToCheck = employeeDAO.getEmployeeByEmployeeNo(currentUser.getEmployeeNo());
            if (employeeToCheck == null) {
                JOptionPane.showMessageDialog(this, "Employee not found!", "Search Result", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (!UtilMethods.canManagerViewEmployee(currentUser, employeeToCheck)) {
                JOptionPane.showMessageDialog(this,
                        "Access Denied! You cannot generate payslip for Admins or other Managers.",
                        "Restricted Access", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Put into parameters map
            Map<String, Object> parameters = new HashMap<>();
            parameters.put("Month", month);
            parameters.put("Year", year);

            // Generate report
            ReportGenerator generator = new ReportGenerator();
            generator.generateReport("PayrollSummaryReport.jrxml", parameters, conn);

        } catch (Exception ex) {
            Logger.getLogger(ViewSalary.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void govContriReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_govContriReportActionPerformed
        try (Connection conn = DBConnection.getConnection()) {

            String employeeId = employeeNo.getText().trim();
            int year = jYearChooser1.getYear();

            if (employeeId.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter an employee number.",
                        "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // --- Access Control Check ---
            Employee employeeToCheck = employeeDAO.getEmployeeByEmployeeNo(employeeId);
            if (employeeToCheck == null) {
                JOptionPane.showMessageDialog(this, "Employee not found!", "Search Result", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (!UtilMethods.canManagerViewEmployee(currentUser, employeeToCheck)) {
                JOptionPane.showMessageDialog(this,
                        "Access Denied! You cannot generate this report for Admins or other Managers.",
                        "Restricted Access", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Put into parameters map
            Map<String, Object> parameters = new HashMap<>();
            parameters.put("EmployeeID", Integer.valueOf(employeeId));
            parameters.put("Year", year);

            // Generate report
            ReportGenerator generator = new ReportGenerator();
            generator.generateReport("AnnualGovContributionReport.jrxml", parameters, conn);

        } catch (Exception ex) {
            Logger.getLogger(ViewSalary.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_govContriReportActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JLabel date;
    private javax.swing.JTextField employeeNo;
    private javax.swing.JButton genPayslip;
    private javax.swing.JButton govContriReport;
    private javax.swing.JComboBox<String> hw;
    private javax.swing.JComboBox<String> hw1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private com.toedter.calendar.JYearChooser jYearChooser1;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private javax.swing.JButton payrollRunButton;
    private javax.swing.JTextArea showData;
    private com.toedter.calendar.demo.TestDateEvaluator testDateEvaluator1;
    private com.toedter.calendar.demo.TestDateEvaluator testDateEvaluator2;
    private javax.swing.JButton viewButton;
    private javax.swing.JButton viewButton1;
    private javax.swing.JButton viewCompensation;
    private java.awt.Label year;
    // End of variables declaration//GEN-END:variables
}
